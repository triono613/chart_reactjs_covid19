[{"C:\\xampp\\htdocs\\chart-react\\src\\index.js":"1","C:\\xampp\\htdocs\\chart-react\\src\\App.js":"2","C:\\xampp\\htdocs\\chart-react\\src\\components\\BarChart.js":"3","C:\\xampp\\htdocs\\chart-react\\src\\components\\PieChart.js":"4","C:\\xampp\\htdocs\\chart-react\\src\\screens\\HomeScreen.js":"5","C:\\xampp\\htdocs\\chart-react\\src\\chart\\BarChartScreen.js":"6","C:\\xampp\\htdocs\\chart-react\\src\\data\\apiData.js":"7","C:\\xampp\\htdocs\\chart-react\\src\\chart\\LineChartScreen.js":"8","C:\\xampp\\htdocs\\chart-react\\src\\chart\\PieChartScreen.js":"9"},{"size":246,"mtime":1631755356518,"results":"10","hashOfConfig":"11"},{"size":600,"mtime":1631795425863,"results":"12","hashOfConfig":"11"},{"size":1976,"mtime":1631717262958,"results":"13","hashOfConfig":"11"},{"size":1804,"mtime":1631717026275,"results":"14","hashOfConfig":"11"},{"size":1741,"mtime":1632043226305,"results":"15","hashOfConfig":"11"},{"size":2981,"mtime":1632038625074,"results":"16","hashOfConfig":"11"},{"size":488,"mtime":1632043799775,"results":"17","hashOfConfig":"11"},{"size":3018,"mtime":1632040875875,"results":"18","hashOfConfig":"11"},{"size":2361,"mtime":1632043913206,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ly6iqk",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\xampp\\htdocs\\chart-react\\src\\index.js",[],["44","45"],"C:\\xampp\\htdocs\\chart-react\\src\\App.js",["46","47"],"import React from 'react';\nimport './App.css';\nimport BarChart from './components/BarChart';\nimport PieChart from './components/PieChart';\nimport { Navbar } from 'react-bootstrap';\nimport HomeScreen from './screens/HomeScreen';\n \n\nconst App = () => {\n  // return \n  // <div>\n  //   <BarChart />\n  //   <PieChart />\n  // </div>\n\n  return (\n<div className=\"App\">\n  <Navbar bg=\"info\">\n    <div className=\"container\">\n      <Navbar.Brand className=\"text-white\">React chart js integration with axios and api public</Navbar.Brand>\n\n    </div>\n  </Navbar>\n  <HomeScreen/>\n</div>\n  );\n}\n\nexport default App;\n","C:\\xampp\\htdocs\\chart-react\\src\\components\\BarChart.js",["48"],"import React from 'react';\r\nimport { Bar  } from 'react-chartjs-2';\r\n\r\n\r\nconst BarChart = () => {\r\n    return <div>\r\n        <Bar\r\n            data={{\r\n               labels: Array('Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'),\r\n        datasets: [{\r\n            label: '# of Votes',\r\n            data: [12, 19, 3, 5, 2, 3],\r\n            backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)',\r\n                        'rgba(75, 192, 192, 0.2)',\r\n                        'rgba(153, 102, 255, 0.2)',\r\n                        'rgba(255, 159, 64, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderWidth: 1,\r\n                },\r\n                {\r\n                    label: '# Quantity',\r\n                    data: [47, 104, 67, 58, 22, 50],\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderColor: 'red',\r\n                }\r\n            ]\r\n             }}\r\n            width={350}\r\n            height={150}\r\n            options={{ \r\n                scales: {\r\n                    y: {\r\n                        beginAtZero: true\r\n                    }\r\n                }\r\n              }}\r\n        /> \r\n    </div>\r\n}\r\n\r\nexport default BarChart;","C:\\xampp\\htdocs\\chart-react\\src\\components\\PieChart.js",[],"C:\\xampp\\htdocs\\chart-react\\src\\screens\\HomeScreen.js",[],"C:\\xampp\\htdocs\\chart-react\\src\\chart\\BarChartScreen.js",["49"],"import React,{useState, useEffect } from \"react\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {getdata, getDataApi} from '../data/apiData';\r\n\r\n\r\n\r\nconst BarChartScreen = () => {\r\n    const [lablesData, setLabelsData] = useState([]);\r\n    const [confirmedData, setConfirmedData] = useState([]);\r\n    const [deathsData, setdeathsData] = useState([]);\r\n\r\n\r\n    const data = (canvas) => {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const gradient = ctx.createLinearGradient(0,90,100,0);\r\n        const gradient1 = ctx.createLinearGradient(0,90,100,0);\r\n        gradient.addColorStop(0,'#ff0c00');\r\n        gradient.addColorStop(0.5,'#f2716b');\r\n        gradient.addColorStop(1,'#fcaba7');\r\n\r\n        gradient1.addColorStop(0,'#6dfc8a');\r\n        gradient1.addColorStop(0.5,'#13eb3f');\r\n        gradient1.addColorStop(1,'#c5fad0');\r\n\r\n        return{\r\n            labels : lablesData,\r\n            datasets : [\r\n                {\r\n                    fill: false,\r\n                    label: 'Confirmed',\r\n                    data:confirmedData,\r\n                    backgroundColor:gradient1,\r\n                    borderColor:gradient1,\r\n                    borderWidth:5\r\n                },\r\n                {\r\n                    fill: false,\r\n                    label: 'Deaths',\r\n                    data: deathsData,\r\n                    backgroundColor:gradient,\r\n                    borderColor:gradient,\r\n                    borderWidth:5\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    const options = {\r\n        responsive : true,\r\n        tooltips:{\r\n            mode: 'index',\r\n            intersect: false\r\n        },\r\n        hover:{\r\n            mode: 'nearest',\r\n            intersect: true\r\n        },\r\n        scales:{\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true\r\n                }\r\n            }]\r\n        },\r\n    legend: {\r\n            display:true,\r\n            position: 'bottom',\r\n            labels: {\r\n                fontColor: 'rgba(242,38,19,1)'\r\n            }\r\n        },\r\n\r\n    }\r\n\r\n    const getChartData = async () => {\r\n        try {\r\n            let labelsArray = [];\r\n            let confirmedArray = [];\r\n            let deathsArray = [];\r\n            \r\n            const data =  await getdata();\r\n            data.forEach(element => {\r\n                labelsArray.push(element.reportDate);\r\n                confirmedArray.push(element.confirmed.total);\r\n                deathsArray.push(element.deaths.total);\r\n            });\r\n\r\n            console.log('data', data );\r\n\r\n            setLabelsData(labelsArray);\r\n            setConfirmedData(confirmedArray);\r\n            setdeathsData(deathsArray);\r\n\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChartData();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n     return (\r\n        <Bar data={data} options={options} />\r\n    )\r\n}\r\n\r\nexport default BarChartScreen;","C:\\xampp\\htdocs\\chart-react\\src\\data\\apiData.js",[],"C:\\xampp\\htdocs\\chart-react\\src\\chart\\LineChartScreen.js",["50","51"],"import React,{useState, useEffect} from \"react\";\r\nimport { Line } from 'react-chartjs-2'\r\nimport {getdata} from '../data/apiData';\r\n\r\n\r\nconst LineChartScreen = () => {\r\n    const [lablesData, setLabelsData] = useState([]);\r\n    const [confirmedData, setConfirmedData] = useState([]);\r\n    const [deathsData, setdeathsData] = useState([]);\r\n\r\n\r\n    const data = (canvas) => {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const gradient = ctx.createLinearGradient(0,90,100,0);\r\n        const gradient1 = ctx.createLinearGradient(0,90,100,0);\r\n        gradient.addColorStop(0,'#ff0c00');\r\n        gradient.addColorStop(0.5,'#f2716b');\r\n        gradient.addColorStop(1,'#fcaba7');\r\n\r\n        gradient1.addColorStop(0,'#6dfc8a');\r\n        gradient1.addColorStop(0.5,'#13eb3f');\r\n        gradient1.addColorStop(1,'#c5fad0');\r\n\r\n\r\n        return{\r\n            labels : lablesData,\r\n            datasets : [\r\n                {\r\n                    barPercentage: 0.5,\r\n                    barThickness: 10,\r\n                    maxBarThickness:100,\r\n                    minBarLength: 2,\r\n                    label: 'Confirmed',\r\n                    data:confirmedData,\r\n                    backgroundColor:gradient1,\r\n                    borderWidth:1\r\n                },\r\n                {\r\n                    barPercentage: 0.5,\r\n                    barThickness: 10,\r\n                    maxBarThickness:100,\r\n                    minBarLength: 2,\r\n                    label: 'Deaths',\r\n                    data: deathsData,\r\n                    backgroundColor:gradient,\r\n                    borderWidth:1\r\n                }\r\n            ]\r\n        }\r\n\r\n    }\r\n\r\n    const options = {\r\n        responsive : true,\r\n        tooltips:{\r\n            mode: 'index',\r\n            intersect: false\r\n        },\r\n        hover:{\r\n            mode: 'nearest',\r\n            intersect: true\r\n        },\r\n        scales:{\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true\r\n                }\r\n            }]\r\n        },\r\n    legend: {\r\n            display:true,\r\n            position: 'bottom',\r\n            labels: {\r\n                fontColor: 'rgba(242,38,19,1)'\r\n            }\r\n        },\r\n\r\n    }\r\n\r\nconst getChartData= async () => {\r\n    try {\r\n        let labelsArray =[];\r\n        let confirmedArray = Array();\r\n        let deathsArray = Array();\r\n        const response = await getdata();\r\n        response.forEach(element => {\r\n            labelsArray.push(element.reportDate);\r\n            confirmedArray.push(element.confirmed.total);\r\n            deathsArray.push(element.deaths.total);\r\n        });\r\n\r\n        setLabelsData(labelsArray);\r\n        setConfirmedData(confirmedArray);\r\n        setdeathsData(deathsArray);\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\nuseEffect(() => {\r\n    getChartData();\r\n    return () => {\r\n        \r\n    }\r\n}, [])\r\n return (\r\n     <Line data={data} options={options}></Line>\r\n )\r\n\r\n}\r\n\r\nexport default LineChartScreen;","C:\\xampp\\htdocs\\chart-react\\src\\chart\\PieChartScreen.js",["52","53","54","55"],"import React,{useState, useEffect} from \"react\";\r\nimport {Pie} from 'react-chartjs-2';\r\nimport {getPieData} from '../data/apiData';\r\n\r\n\r\nconst PieChartScreen = () => {\r\n\r\n    const [confirmedData, setConfirmedData] = useState(0);\r\n    const [deathsData, setDeathsData] = useState(0);\r\n\r\n    const data = (canvas) => {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const gradient = ctx.createLinearGradient(0,90,100,0);\r\n        const gradient1 = ctx.createLinearGradient(0,90,100,0);\r\n        gradient.addColorStop(0,'#ff0c00');\r\n        gradient.addColorStop(0.5,'#f2716b');\r\n        gradient.addColorStop(1,'#fcaba7');\r\n\r\n        gradient1.addColorStop(0,'#6dfc8a');\r\n        gradient1.addColorStop(0.5,'#13eb3f');\r\n        gradient1.addColorStop(1,'#c5fad0');\r\n\r\n        return {\r\n            labels : Array('Confirmed','Deaths'),\r\n            datasets : [\r\n                {\r\n                    label: 'Confirmed',\r\n                    data: Array(confirmedData,deathsData),\r\n                    backgroundColor: Array(gradient1,gradient),\r\n                    borderWidth:1\r\n                }\r\n            ]\r\n        }\r\n\r\n\r\n    }\r\n    const options = {\r\n        responsive :true,\r\n        Pie : {\r\n            allowPointSelect : true,\r\n            cursor: 'pointer',\r\n            dataLabels:{\r\n                enabled : true,\r\n                format : '<b>{point.name}</b>: { point.percentage:.1f } %'\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n const getChartData = async () => {\r\n    try {\r\n        let labelsArray =[];\r\n        let confirmedData=  0;\r\n        let deathsData = 0;\r\n        const response = await getPieData();\r\n\r\n        console.log('response c= ',response); \r\n\r\n        if ( response !== null ){\r\n                const {confirmed, deaths} = response;\r\n                const total = confirmed.value + deaths.value ;\r\n                confirmedData = parseFloat( (( confirmed.value / total ) * 100).toFixed(2) );\r\n                deathsData = parseFloat( (( deaths.value / total ) * 100).toFixed(2) );\r\n\r\n                setConfirmedData(confirmedData);\r\n                setDeathsData(deathsData);\r\n        }\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n\r\n }   \r\n\r\n useEffect(() => {\r\n        getChartData();\r\n }, []);\r\n\r\n    return (\r\n        <Pie data={data} options={options} />\r\n    );\r\n\r\n}\r\n\r\nexport default PieChartScreen;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":16},{"ruleId":"60","severity":1,"message":"64","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":16},{"ruleId":"65","severity":1,"message":"66","line":9,"column":24,"nodeType":"67","messageId":"68","endLine":9,"endColumn":83},{"ruleId":"60","severity":1,"message":"69","line":3,"column":18,"nodeType":"62","messageId":"63","endLine":3,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":83,"column":30,"nodeType":"67","messageId":"68","endLine":83,"endColumn":37},{"ruleId":"65","severity":1,"message":"66","line":84,"column":27,"nodeType":"67","messageId":"68","endLine":84,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":24,"column":22,"nodeType":"67","messageId":"68","endLine":24,"endColumn":49},{"ruleId":"65","severity":1,"message":"66","line":28,"column":27,"nodeType":"67","messageId":"68","endLine":28,"endColumn":58},{"ruleId":"65","severity":1,"message":"66","line":29,"column":38,"nodeType":"67","messageId":"68","endLine":29,"endColumn":63},{"ruleId":"60","severity":1,"message":"70","line":52,"column":13,"nodeType":"62","messageId":"63","endLine":52,"endColumn":24},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'BarChart' is defined but never used.","Identifier","unusedVar","'PieChart' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","'getDataApi' is defined but never used.","'labelsArray' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]