{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\chart-react\\\\src\\\\chart\\\\PieChartScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Pie } from 'react-chartjs-2';\nimport { getPieData } from '../data/apiData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PieChartScreen = () => {\n  _s();\n\n  const [confirmedData, setConfirmedData] = useState(0);\n  const [deathsData, setDeathsData] = useState(0);\n\n  const data = canvas => {\n    const ctx = canvas.getContext(\"2d\");\n    const gradient = ctx.createLinearGradient(0, 90, 100, 0);\n    const gradient1 = ctx.createLinearGradient(0, 90, 100, 0);\n    gradient.addColorStop(0, '#ff0c00');\n    gradient.addColorStop(0.5, '#f2716b');\n    gradient.addColorStop(1, '#fcaba7');\n    gradient1.addColorStop(0, '#6dfc8a');\n    gradient1.addColorStop(0.5, '#13eb3f');\n    gradient1.addColorStop(1, '#c5fad0');\n    return {\n      labels: Array('Confirmed', 'Deaths'),\n      datasets: [{\n        label: 'Confirmed',\n        data: Array(confirmedData, deathsData),\n        backgroundColor: Array(gradient1, gradient),\n        borderWidth: 1\n      }]\n    };\n  };\n\n  const options = {\n    responsive: true,\n    Pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: { point.percentage:.1f } %'\n      }\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      let labelsArray = [];\n      let confirmedData = 0;\n      let deathsData = 0;\n      const response = await getPieData();\n      console.log('response c = ', response);\n\n      if (response !== null) {\n        const {\n          confirmed,\n          deaths\n        } = response;\n        const total = confirmed.value + deaths.value;\n        confirmedData = parseFloat((confirmed.value / total * 100).toFixed(2));\n        deathsData = parseFloat((deaths.value / total * 100).toFixed(2));\n        setConfirmedData(confirmedData);\n        setDeathsData(deathsData);\n      }\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    return () => {\n      getChartData();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Pie, {\n    data: data,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PieChartScreen, \"LvQG5gihun8ikQ/EKZEcFHmlpFk=\");\n\n_c = PieChartScreen;\nexport default PieChartScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieChartScreen\");","map":{"version":3,"sources":["C:/xampp/htdocs/chart-react/src/chart/PieChartScreen.js"],"names":["React","useState","useEffect","Pie","getPieData","PieChartScreen","confirmedData","setConfirmedData","deathsData","setDeathsData","data","canvas","ctx","getContext","gradient","createLinearGradient","gradient1","addColorStop","labels","Array","datasets","label","backgroundColor","borderWidth","options","responsive","allowPointSelect","cursor","dataLabels","enabled","format","getChartData","labelsArray","response","console","log","confirmed","deaths","total","value","parseFloat","toFixed","error"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from \"react\";\r\nimport {Pie} from 'react-chartjs-2';\r\nimport {getPieData} from '../data/apiData';\r\n\r\n\r\nconst PieChartScreen = () => {\r\n\r\n    const [confirmedData, setConfirmedData] = useState(0);\r\n    const [deathsData, setDeathsData] = useState(0);\r\n\r\n    const data = (canvas) => {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const gradient = ctx.createLinearGradient(0,90,100,0);\r\n        const gradient1 = ctx.createLinearGradient(0,90,100,0);\r\n        gradient.addColorStop(0,'#ff0c00');\r\n        gradient.addColorStop(0.5,'#f2716b');\r\n        gradient.addColorStop(1,'#fcaba7');\r\n\r\n        gradient1.addColorStop(0,'#6dfc8a');\r\n        gradient1.addColorStop(0.5,'#13eb3f');\r\n        gradient1.addColorStop(1,'#c5fad0');\r\n\r\n        return {\r\n            labels : Array('Confirmed','Deaths'),\r\n            datasets : [\r\n                {\r\n                    label: 'Confirmed',\r\n                    data: Array(confirmedData,deathsData),\r\n                    backgroundColor: Array(gradient1,gradient),\r\n                    borderWidth:1\r\n                }\r\n            ]\r\n        }\r\n\r\n\r\n    }\r\n    const options = {\r\n        responsive :true,\r\n        Pie : {\r\n            allowPointSelect : true,\r\n            cursor: 'pointer',\r\n            dataLabels:{\r\n                enabled : true,\r\n                format : '<b>{point.name}</b>: { point.percentage:.1f } %'\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n const getChartData = async () => {\r\n    try {\r\n        let labelsArray =[];\r\n        let confirmedData=  0;\r\n        let deathsData = 0;\r\n        const response = await getPieData();\r\n\r\n        console.log('response c = ',response); \r\n\r\n        if ( response !== null ){\r\n                const {confirmed, deaths} = response;\r\n                const total = confirmed.value + deaths.value ;\r\n                confirmedData = parseFloat( (( confirmed.value / total ) * 100).toFixed(2) );\r\n                deathsData = parseFloat( (( deaths.value / total ) * 100).toFixed(2) );\r\n\r\n                setConfirmedData(confirmedData);\r\n                setDeathsData(deathsData);\r\n        }\r\n        \r\n    } catch (error) {\r\n        \r\n    }\r\n\r\n }   \r\n\r\n useEffect(() => {\r\n    \r\n     return () => {\r\n        getChartData();\r\n     }\r\n }, []);\r\n\r\n    return (\r\n        <Pie data={data} options={options} />\r\n    );\r\n\r\n}\r\n\r\nexport default PieChartScreen;"]},"metadata":{},"sourceType":"module"}