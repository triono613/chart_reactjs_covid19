{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\chart-react\\\\src\\\\chart\\\\BarChartScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Bar } from 'react-chartjs-2';\nimport { getdata, getDataApi } from '../data/apiData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChartScreen = () => {\n  _s();\n\n  const [lablesData, setLabelsData] = useState([]);\n  const [confirmedData, setConfirmedData] = useState([]);\n  const [deathsData, setdeathsData] = useState([]);\n\n  const data = canvas => {\n    const ctx = canvas.getContext(\"2d\");\n    const gradient = ctx.createLinearGradient(0, 90, 100, 0);\n    gradient.addColorStop(0, \"ff9a9e\");\n    gradient.addColorStop(0.5, \"fad0c4\");\n    gradient.addColorStop(0, \"fad0c4\");\n    return {\n      labels: [],\n      datasets: [{\n        barPercentage: 0.5,\n        barThickness: 10,\n        maxBarThickness: 100,\n        minBarLength: 2,\n        label: '',\n        data: [],\n        backgroundColor: gradient,\n        borderWidth: 1\n      }, {\n        barPercentage: 0.5,\n        barThickness: 10,\n        maxBarThickness: 100,\n        minBarLength: 2,\n        label: '',\n        data: [],\n        backgroundColor: gradient,\n        borderWidth: 1\n      }]\n    };\n  };\n\n  const options = {\n    responsive: true,\n    tooltips: {\n      mode: 'index',\n      intersect: false\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true\n    },\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      labels: {\n        fontColor: 'rgba(242,38,19,1)'\n      }\n    }\n  };\n\n  const getChartData = async () => {\n    try {\n      let labelsArray = [];\n      let confirmedArray = [];\n      let deathsArray = [];\n      const data = await getdata();\n      data.forEach(element => {\n        labelsArray.push(element.reportDate);\n        confirmedArray.push(element.confirmed.total);\n        deathsArray.push(element.deaths.total);\n      });\n      console.log('data', data);\n      setLabelsData(labelsArray);\n      setConfirmedData(confirmedArray);\n      setdeathsData(deathsArray);\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    getChartData();\n    return () => {};\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Bar, {\n    data: data,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BarChartScreen, \"Dt/i8VxcpdEVu4gaEGyx1qlbc6I=\");\n\n_c = BarChartScreen;\nexport default BarChartScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChartScreen\");","map":{"version":3,"sources":["C:/xampp/htdocs/chart-react/src/chart/BarChartScreen.js"],"names":["React","useState","useEffect","Bar","getdata","getDataApi","BarChartScreen","lablesData","setLabelsData","confirmedData","setConfirmedData","deathsData","setdeathsData","data","canvas","ctx","getContext","gradient","createLinearGradient","addColorStop","labels","datasets","barPercentage","barThickness","maxBarThickness","minBarLength","label","backgroundColor","borderWidth","options","responsive","tooltips","mode","intersect","hover","scales","yAxes","ticks","beginAtZero","legend","display","position","fontColor","getChartData","labelsArray","confirmedArray","deathsArray","forEach","element","push","reportDate","confirmed","total","deaths","console","log","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,iBAAlC;;;AAIA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;;AAGA,QAAMY,IAAI,GAAIC,MAAD,IAAY;AACrB,UAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,CAAzB,EAA2B,EAA3B,EAA8B,GAA9B,EAAkC,CAAlC,CAAjB;AACAD,IAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAwB,QAAxB;AACAF,IAAAA,QAAQ,CAACE,YAAT,CAAsB,GAAtB,EAA0B,QAA1B;AACAF,IAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAwB,QAAxB;AAEA,WAAM;AACFC,MAAAA,MAAM,EAAG,EADP;AAEFC,MAAAA,QAAQ,EAAG,CACP;AACIC,QAAAA,aAAa,EAAE,GADnB;AAEIC,QAAAA,YAAY,EAAE,EAFlB;AAGIC,QAAAA,eAAe,EAAC,GAHpB;AAIIC,QAAAA,YAAY,EAAE,CAJlB;AAKIC,QAAAA,KAAK,EAAE,EALX;AAMIb,QAAAA,IAAI,EAAC,EANT;AAOIc,QAAAA,eAAe,EAACV,QAPpB;AAQIW,QAAAA,WAAW,EAAC;AARhB,OADO,EAWP;AACIN,QAAAA,aAAa,EAAE,GADnB;AAEIC,QAAAA,YAAY,EAAE,EAFlB;AAGIC,QAAAA,eAAe,EAAC,GAHpB;AAIIC,QAAAA,YAAY,EAAE,CAJlB;AAKIC,QAAAA,KAAK,EAAE,EALX;AAMIb,QAAAA,IAAI,EAAC,EANT;AAOIc,QAAAA,eAAe,EAACV,QAPpB;AAQIW,QAAAA,WAAW,EAAC;AARhB,OAXO;AAFT,KAAN;AAyBH,GAhCD;;AAiCA,QAAMC,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAG,IADD;AAEZC,IAAAA,QAAQ,EAAC;AACLC,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,SAAS,EAAE;AAFN,KAFG;AAMZC,IAAAA,KAAK,EAAC;AACFF,MAAAA,IAAI,EAAE,SADJ;AAEFC,MAAAA,SAAS,EAAE;AAFT,KANM;AAUZE,IAAAA,MAAM,EAAC;AACHC,MAAAA,KAAK,EAAE,CAAC;AACJC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAC;AADT;AADH,OAAD;AADJ,KAVK;AAiBhBC,IAAAA,MAAM,EAAE;AACAC,MAAAA,OAAO,EAAC,IADR;AAEAC,MAAAA,QAAQ,EAAE,QAFV;AAGArB,MAAAA,MAAM,EAAE;AACJsB,QAAAA,SAAS,EAAE;AADP;AAHR;AAjBQ,GAAhB;;AA2BA,QAAMC,YAAY,GAAG,YAAY;AAC7B,QAAI;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,cAAc,GAAG,EAArB;AACA,UAAIC,WAAW,GAAG,EAAlB;AAEA,YAAMjC,IAAI,GAAI,MAAMT,OAAO,EAA3B;AACAS,MAAAA,IAAI,CAACkC,OAAL,CAAaC,OAAO,IAAI;AACpBJ,QAAAA,WAAW,CAACK,IAAZ,CAAiBD,OAAO,CAACE,UAAzB;AACAL,QAAAA,cAAc,CAACI,IAAf,CAAoBD,OAAO,CAACG,SAAR,CAAkBC,KAAtC;AACAN,QAAAA,WAAW,CAACG,IAAZ,CAAiBD,OAAO,CAACK,MAAR,CAAeD,KAAhC;AACH,OAJD;AAMAE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB1C,IAApB;AAEAL,MAAAA,aAAa,CAACoC,WAAD,CAAb;AACAlC,MAAAA,gBAAgB,CAACmC,cAAD,CAAhB;AACAjC,MAAAA,aAAa,CAACkC,WAAD,CAAb;AAEH,KAlBD,CAkBE,OAAOU,KAAP,EAAc,CAEf;AACJ,GAtBD;;AAwBAtD,EAAAA,SAAS,CAAC,MAAM;AACZyC,IAAAA,YAAY;AACZ,WAAO,MAAM,CAEZ,CAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAOC,sBACG,QAAC,GAAD;AAAK,IAAA,IAAI,EAAE9B,IAAX;AAAiB,IAAA,OAAO,EAAEgB;AAA1B;AAAA;AAAA;AAAA;AAAA,UADH;AAGJ,CApGD;;GAAMvB,c;;KAAAA,c;AAsGN,eAAeA,cAAf","sourcesContent":["import React,{useState, useEffect } from \"react\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {getdata, getDataApi} from '../data/apiData';\r\n\r\n\r\n\r\nconst BarChartScreen = () => {\r\n    const [lablesData, setLabelsData] = useState([]);\r\n    const [confirmedData, setConfirmedData] = useState([]);\r\n    const [deathsData, setdeathsData] = useState([]);\r\n\r\n\r\n    const data = (canvas) => {\r\n        const ctx = canvas.getContext(\"2d\");\r\n        const gradient = ctx.createLinearGradient(0,90,100,0);\r\n        gradient.addColorStop(0,\"ff9a9e\");\r\n        gradient.addColorStop(0.5,\"fad0c4\");\r\n        gradient.addColorStop(0,\"fad0c4\");\r\n\r\n        return{\r\n            labels : [],\r\n            datasets : [\r\n                {\r\n                    barPercentage: 0.5,\r\n                    barThickness: 10,\r\n                    maxBarThickness:100,\r\n                    minBarLength: 2,\r\n                    label: '',\r\n                    data:[],\r\n                    backgroundColor:gradient,\r\n                    borderWidth:1\r\n                },\r\n                {\r\n                    barPercentage: 0.5,\r\n                    barThickness: 10,\r\n                    maxBarThickness:100,\r\n                    minBarLength: 2,\r\n                    label: '',\r\n                    data:[],\r\n                    backgroundColor:gradient,\r\n                    borderWidth:1\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    const options = {\r\n        responsive : true,\r\n        tooltips:{\r\n            mode: 'index',\r\n            intersect: false\r\n        },\r\n        hover:{\r\n            mode: 'nearest',\r\n            intersect: true\r\n        },\r\n        scales:{\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true\r\n                }\r\n            }]\r\n        },\r\n    legend: {\r\n            display:true,\r\n            position: 'bottom',\r\n            labels: {\r\n                fontColor: 'rgba(242,38,19,1)'\r\n            }\r\n        },\r\n\r\n    }\r\n\r\n    const getChartData = async () => {\r\n        try {\r\n            let labelsArray = [];\r\n            let confirmedArray = [];\r\n            let deathsArray = [];\r\n            \r\n            const data =  await getdata();\r\n            data.forEach(element => {\r\n                labelsArray.push(element.reportDate);\r\n                confirmedArray.push(element.confirmed.total);\r\n                deathsArray.push(element.deaths.total);\r\n            });\r\n\r\n            console.log('data', data );\r\n\r\n            setLabelsData(labelsArray);\r\n            setConfirmedData(confirmedArray);\r\n            setdeathsData(deathsArray);\r\n\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getChartData();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n     return (\r\n        <Bar data={data} options={options} />\r\n    )\r\n}\r\n\r\nexport default BarChartScreen;"]},"metadata":{},"sourceType":"module"}